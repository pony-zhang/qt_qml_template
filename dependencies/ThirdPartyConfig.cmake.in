# Third-party dependencies configuration
# This file is automatically generated by the dependencies CMakeLists.txt

# Set include directories
set(THIRD_PARTY_INCLUDE_DIRS @DEPENDENCIES_INCLUDE_DIR@)

# Set libraries
set(THIRD_PARTY_LIBRARIES third_party)

# Commonly used flags
set(THIRD_PARTY_COMPILE_DEFINITIONS)
set(THIRD_PARTY_COMPILE_OPTIONS)

# Function to add a third-party library to a target
function(add_third_party_dependencies TARGET)
    target_include_directories(${TARGET} PRIVATE ${THIRD_PARTY_INCLUDE_DIRS})
    target_link_libraries(${TARGET} PRIVATE ${THIRD_PARTY_LIBRARIES})

    # Add common compile definitions if any
    if(THIRD_PARTY_COMPILE_DEFINITIONS)
        target_compile_definitions(${TARGET} PRIVATE ${THIRD_PARTY_COMPILE_DEFINITIONS})
    endif()

    # Add common compile options if any
    if(THIRD_PARTY_COMPILE_OPTIONS)
        target_compile_options(${TARGET} PRIVATE ${THIRD_PARTY_COMPILE_OPTIONS})
    endif()
endfunction()

# Function to check if a specific third-party library is available
function(has_third_party_library LIB_NAME RESULT_VAR)
    # Check if include directory exists for the library
    if(EXISTS "${THIRD_PARTY_INCLUDE_DIRS}/${LIB_NAME}")
        set(${RESULT_VAR} TRUE PARENT_SCOPE)
    else()
        set(${RESULT_VAR} FALSE PARENT_SCOPE)
    endif()
endfunction()

# Function to get include path for a specific library
function(get_third_party_include LIB_NAME RESULT_VAR)
    set(${RESULT_VAR} "${THIRD_PARTY_INCLUDE_DIRS}/${LIB_NAME}" PARENT_SCOPE)
endfunction()

# Function to find third-party headers
function(find_third_party_header HEADER_NAME RESULT_VAR)
    file(GLOB_RECURSE HEADER_PATH "${THIRD_PARTY_INCLUDE_DIRS}/**/${HEADER_NAME}")
    if(HEADER_PATH)
        list(GET HEADER_PATH 0 HEADER_FOUND)
        get_filename_component(HEADER_DIR ${HEADER_FOUND} DIRECTORY)
        set(${RESULT_VAR} ${HEADER_DIR} PARENT_SCOPE)
    else()
        set(${RESULT_VAR} "" PARENT_SCOPE)
    endif()
endfunction()

message(STATUS "Third-party dependencies configured")
message(STATUS "  Include directories: ${THIRD_PARTY_INCLUDE_DIRS}")
message(STATUS "  Libraries: ${THIRD_PARTY_LIBRARIES}")